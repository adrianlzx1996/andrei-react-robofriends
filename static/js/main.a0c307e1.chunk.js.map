{"version":3,"sources":["registerServiceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Card","id","name","email","className","alt","src","CardList","robots","map","robot","index","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","CounterButton","props","updateCount","setState","count","color","this","onClick","PureComponent","Header","nextProps","nextState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","res","json","data","useEffect","filteredRobots","filter","toLowerCase","includes","initialState","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a0c307e1.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n\treturn (\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{robots.map((robot, index) => (\n\t\t\t\t<Card\n\t\t\t\t\tkey={robot.id}\n\t\t\t\t\tid={robot.id}\n\t\t\t\t\tname={robot.name}\n\t\t\t\t\temail={robot.email}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"search robot\"\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = ({ children }) => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\toverflowY: \"scroll\",\n\t\t\t\tborder: \"5px solid black\",\n\t\t\t\theight: \"500px\",\n\t\t\t}}>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;\n","import React, { PureComponent } from \"react\";\n\nclass CounterButton extends PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcount: 0,\n\t\t};\n\t}\n\t// shouldComponentUpdate(nextProps, nextState) {\n\t// \tif (this.state.count !== nextState.count) return true;\n\t// \treturn false;\n\t// }\n\tupdateCount = () => {\n\t\tthis.setState((state) => {\n\t\t\treturn { count: this.state.count + 1 };\n\t\t});\n\t};\n\trender() {\n\t\tconsole.log(\"CounterButton\");\n\t\treturn (\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\n\t\t\t\tCount: {this.state.count}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn false;\n\t}\n\trender() {\n\t\tconsole.log(\"Header\");\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t<CounterButton color=\"red\" />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Header;\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import React, { useEffect } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"../components/Scroll\";\nimport Header from \"../components/Header\";\nimport { connect } from \"react-redux\";\nimport { requestRobots, setSearchField } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots()),\n\t};\n};\n\nfunction App(props) {\n\tconst { searchField, onSearchChange, onRequestRobots, isPending, robots } =\n\t\tprops;\n\n\tuseEffect(() => {\n\t\tonRequestRobots();\n\t}, [onRequestRobots]);\n\n\tconst filteredRobots = robots.filter((robot) => {\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t});\n\n\treturn isPending ? (\n\t\t<h1>Loading</h1>\n\t) : (\n\t\t<div className=\"tc\">\n\t\t\t<Header />\n\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t<Scroll>\n\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t</Scroll>\n\t\t</div>\n\t);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_FAILED,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\n\tfetch(`https://jsonplaceholder.typicode.com/users`)\n\t\t.then((res) => res.json())\n\t\t.then((data) =>\n\t\t\tdispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data })\n\t\t)\n\t\t.catch((error) =>\n\t\t\tdispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n\t\t);\n};\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_FAILED,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nconst initialState = {\n\tsearchField: \"\",\n};\n\nexport const searchRobots = (state = initialState, action = {}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn { ...state, searchField: action.payload };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n\tswitch (action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn { ...state, isPending: true };\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn { ...state, isPending: false, robots: action.payload };\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn { ...state, isPending: false, error: action.payload };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport \"./index.css\";\n// import reportWebVitals from \"./reportWebVitals\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport App from \"./containers/App\";\nimport { requestRobots, searchRobots } from \"./reducers\";\nimport \"tachyons\";\n// import { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nregisterServiceWorker();\n// reportWebVitals();\n"],"sourceRoot":""}